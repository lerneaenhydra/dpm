%GEN_BATTMODEL Generate an anonymous function that calculates the analytic
%change in SOC given model constants. This function will then search the
%current directory, scanning through all .m files and replacing any line
%following keystr with an anonymous function solving the SOC.

%Keystring to use for the util_matched_replace function
keystr = '%#!KEYSTR_BATTMODEL_c202543ea4a23969c864d7692a381a3d';

syms w_0 dwdt t tau_gen p_tot k_lb k_lg batt_energy;

%The shaft speed is modeled as a simple integrator
w = w_0 + dwdt * t;

%Assume the net electrical generator power is the mechanical power (w*tau),
%reduced by some loss proportional to the torque squared (which models the
%losses as primarily resistive).
p_gen_net = -w * tau_gen - tau_gen^2 * k_lg;

%Assume the power generated by the battery is the amount required (total -
%generator power) with an additional loss term proportional to the power
%squared. This gives a result that is similar to, but not the same as, a
%model with a constant voltage source and series resistance. This, more
%physically related example, can be solved for but contains a square root
%expression. To reduce the computational load and keep the model
%mathmatically simple we will instead use this approximation, which is not
%completely unreasonable as it penalizes battery power with large magnitude
%and correctly handles losses for both positive and negative battery power.
p_batt = p_tot - p_gen_net + (p_tot - p_gen_net)^2 * k_lb;

%Model the battery SOC as an integrator
dsocdt = -1/batt_energy * p_batt;

%Analytically calculate the change in SOC. The only non-constant parameter
%is w.
delta_soc = int(dsocdt, t, 0, t);

%Generate the function. Be sure to update all calls to this function if
%altering the number/order of input variables!
h = matlabFunction(delta_soc, 'vars', [w_0 dwdt t tau_gen p_tot k_lb k_lg batt_energy]);

str = func2str(h);

str = ['delta_soc_f = ', str, ';'];

util_matched_replace('./', '.m', keystr, str);